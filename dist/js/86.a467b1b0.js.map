{"version":3,"file":"js/86.a467b1b0.js","mappings":"2UAWA,MAAMA,EAAmBC,IACvBC,UAAUC,UAAUC,UAAUH,EAAK,E,4dCTrC,MAAMI,EAAc,EAEpB,Q,i1BCQA,MAAMC,EAAyBC,IAEjB,IAARA,EAAEC,EAGJD,EAAEE,iBAGFC,EAAK,mBACP,E,oPChBF,MAAM,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,Q,mECIMC,EAAsB,KAE1B,MAAMC,EAAW,mBAGjB,IAAIC,EAAQ,IAKZ,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAErBD,GAASD,EAASG,KAAKC,MAAMD,KAAKE,SAAWL,EAASM,SAGxD,OAAOL,CAAK,EAIRM,GAAiBC,EAAAA,EAAAA,IAAKC,EAAMR,MAASQ,EAAMR,MAAQF,KAGnDW,GAAcF,EAAAA,EAAAA,MAAMC,EAAMR,OAM1BU,EAAmBhB,IAEM,UAAzBA,EAAEiB,KAAKC,eACNH,EAAYI,QAEfP,EAAeO,MAAQf,IACzB,GAIFgB,EAAAA,EAAAA,KAAU,KAERC,SAASC,iBAAiB,UAAWN,EAAgB,KAIvDO,EAAAA,EAAAA,KAAY,KAEVF,SAASG,oBAAoB,UAAWR,EAAgB,IAQ1D,MAAMS,EAAmB,KAEvBV,EAAYI,OAASJ,EAAYI,MAEjC,MAAMO,EAAYd,EAAeO,MAAMQ,WAAWC,UAAU,GAGtDC,EAA4BR,SAASS,SAASC,KAAKC,MAAM,KAEzDC,EAAgBJ,EAA0B,GAAGK,WAAW,IAAK,KAEnEL,EAA0B,IAEtBd,EAAYI,MAEVc,EAAgB,IAAMP,EAEtBO,EAAcE,QAAQT,EAAW,KAAKU,OAAOD,QAAQ,KAAM,KAAKD,WAAW,IAAK,KAEtFb,SAASS,SAASC,KAAOF,EAA0BQ,KAAK,IAAI,E,uWClF9D,MAAM,EAAc,EAEpB,Q,oFCQMC,EAAexB,EAAMyB,OAAUzB,EAAMyB,OAAOP,MAAM,KAAO,GAG/D,IAAIQ,EAAW,EAOf,MAAMC,EAAeC,IAEfA,EAAe,IACjBF,EAAWE,GAIb,MAAMb,EAA4BR,SAASS,SAASC,KAAKC,MAAM,KAG/DX,SAASS,SAASC,KAChB,IAAMS,EAAW,KAEsB,IAArCX,EAA0BlB,OACxBkB,EAA0B,GAC1B,GAAG,E,OAEXY,EAAYjC,KAAKmC,IAAIC,OAAO9B,EAAM+B,SAAUP,EAAY3B,S,gTCrCxD,MAAM,EAAc,EAEpB,O","sources":["webpack://wave-ui-vue3-color-tool/./src/components/CaptionColRandomColor.vue","webpack://wave-ui-vue3-color-tool/./src/components/CaptionColRandomColor.vue?8449","webpack://wave-ui-vue3-color-tool/./src/components/ButtonColRandomColor.vue","webpack://wave-ui-vue3-color-tool/./src/components/ButtonColRandomColor.vue?038b","webpack://wave-ui-vue3-color-tool/./src/components/ColRandomColor.vue","webpack://wave-ui-vue3-color-tool/./src/components/ColRandomColor.vue?3538","webpack://wave-ui-vue3-color-tool/./src/views/RandomColorView.vue","webpack://wave-ui-vue3-color-tool/./src/views/RandomColorView.vue?652b"],"sourcesContent":["<script setup>\nimport { defineProps } from 'vue'\n\ndefineProps({\n  generatedColor: String\n})\n\n/**\n * Копирует переданную строчку в буфер обмена\n * @param {String} text - Строчка, которая будет скопирована в буфер обмена\n */\nconst copyToClipboard = (text) => {\n  navigator.clipboard.writeText(text)\n}\n</script>\n\n<template>\n  <w-tooltip top>\n    <template #activator=\"{ on }\">\n      <w-tag class=\"pa3 sh3 text-bold\" bg-color=\"grey-light3\" round xl\n        @click=\"copyToClipboard(generatedColor)\" v-on=\"on\" style=\"cursor: pointer;\">\n        {{ generatedColor }}\n      </w-tag>\n    </template>\n    Click to Copy<br /> to Clipboard\n  </w-tooltip>\n</template>\n","import script from \"./CaptionColRandomColor.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CaptionColRandomColor.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { defineProps, defineEmits } from 'vue'\nconst emit = defineEmits(['touchColorLocked'])\n\ndefineProps({\n  colorLocked: Boolean\n})\n\n/**\n * Обрабатываем клик-событие по кнопке.\n * Нужно, чтобы отсеивать ложные срабатывания при нажатии на клавишу \"пробел\".\n * @param {event} e - клик-событие, передающееся от HTML-документа\n */\nconst childTouchColorLocked = (e) => {\n  // Отсеиваем срабатывания, вызванные нажатием клавиши \"пробел\".\n  if (e.x === 0) {\n    // Если кликать по кнопке мышкой, то с событием передаётся и положение курсора.\n    // А если событие вызывается нажатием клавиши \"пробел\", то это значение равно нулю.\n    e.preventDefault()\n  } else {\n    // Если правильно сработало, то отправляем событие родительскому компоненту.\n    emit('touchColorLocked')\n  }\n}\n</script>\n\n<template>\n  <w-button @click=\"childTouchColorLocked\" class=\"sh3\" bg-color=\"grey-light3\" >\n    <svg v-if=\"colorLocked\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M144 144v48H304V144c0-44.2-35.8-80-80-80s-80 35.8-80 80zM80 192V144C80 64.5 144.5 0 224 0s144 64.5 144 144v48h16c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V256c0-35.3 28.7-64 64-64H80z\"/></svg>\n    <svg v-else xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M352 144c0-44.2 35.8-80 80-80s80 35.8 80 80v48c0 17.7 14.3 32 32 32s32-14.3 32-32V144C576 64.5 511.5 0 432 0S288 64.5 288 144v48H64c-35.3 0-64 28.7-64 64V448c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V256c0-35.3-28.7-64-64-64H352V144z\"/></svg>\n  </w-button>\n</template>\n\n<style scoped>\nsvg {\n  height: 1em;\n}\n</style>\n","import script from \"./ButtonColRandomColor.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ButtonColRandomColor.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ButtonColRandomColor.vue?vue&type=style&index=0&id=49587f48&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/usver/color-tool/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-49587f48\"]])\n\nexport default __exports__","<script setup>\nimport { defineProps, onMounted, onUnmounted, ref } from 'vue'\nimport CaptionColRandomColor from '@/components/CaptionColRandomColor.vue'\nimport ButtonColRandomColor from '@/components/ButtonColRandomColor.vue'\n\nconst props = defineProps({\n  color: String // код цвета\n})\n\n/**\n * Функция по генерации кода цвета для столбцов\n */\nconst generateRandomColor = () => {\n  // Список символов, которые будем использовать для генерации\n  const hexCodes = '0123456789ABCDEF'\n\n  // В этой переменной будем хранить сгенерированный цвет\n  let color = '#'\n\n  /* В цвете используется 6 шестнадцатизначных символов,\n   * вот и выполним цикл шесть раз.\n  */\n  for (let i = 0; i < 6; i++) {\n    // Добавляем к коду цвета очередной симвл\n    color += hexCodes[Math.floor(Math.random() * hexCodes.length)]\n  }\n\n  return color\n}\n\n// Тут будем хранить сгенерированный цвет, поскольку его использовать будем несколько раз\nconst generatedColor = ref((props.color) ? props.color : generateRandomColor())\n\n// Заблокирован ли цвет для изменения\nconst colorLocked = ref(!!props.color)\n\n/**\n * При нажатии на клавишу пробела будет меняться цвет\n * @param {*} e - event\n */\nconst keydownListener = (e) => {\n  // Функция должна реагировать на клавишу пробела в независимости от системы\n  if (e.code.toLowerCase() === 'space' &&\n      !colorLocked.value) {\n    // Обновляем цветовой код\n    generatedColor.value = generateRandomColor()\n  }\n}\n\n// Лайфхук при генерации сайта\nonMounted(() => {\n  // Добавляем \"слушателя\" на нажатие клавиш\n  document.addEventListener('keydown', keydownListener)\n})\n\n// Лайфхук при уничтожении страницы\nonUnmounted(() => {\n  // Удаляем \"слушателя\" на нажатие клавиш\n  document.removeEventListener('keydown', keydownListener)\n})\n\n/**\n * Переключает значение флага между открытым и закрытым,\n * вызывается из дочернего компонента.\n * А так же исправляет адрес странички, чтобы можно было поделиться цветом\n */\nconst touchColorLocked = () => {\n  // Изменяем значение флага\n  colorLocked.value = !colorLocked.value\n  // Удаляем из сточки кода цвета первый символ '#', который помешает браузеру\n  const colorCode = generatedColor.value.toString().substring(1)\n\n  // Разделяем хеш страницы на части\n  const documentLocationHashArray = document.location.hash.split('/')\n\n  const colorCodeHash = documentLocationHashArray[2].replaceAll('-', ' ')\n\n  documentLocationHashArray[2] =\n    // Определяем надо ли добавить или удалить код цвета\n    ((colorLocked.value)\n      // добавляем код к строчке\n      ? colorCodeHash + ' ' + colorCode\n      // удаляем код из строчки\n      : colorCodeHash.replace(colorCode, '')).trim().replace('  ', ' ').replaceAll(' ', '-')\n\n  document.location.hash = documentLocationHashArray.join('/')\n}\n</script>\n\n<template>\n    <w-flex column align-center justify-space-evenly :style=\"{ 'background-color': generatedColor }\">\n        <CaptionColRandomColor :generatedColor=\"generatedColor\" />\n        <ButtonColRandomColor :colorLocked=\"colorLocked\" @touch-color-locked=\"touchColorLocked\" />\n    </w-flex>\n</template>\n","import script from \"./ColRandomColor.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ColRandomColor.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { defineProps } from 'vue'\nimport ColRandomColor from '@/components/ColRandomColor.vue'\n\n/*\n* Ожидаем два значения, которые будут передаваться при помощи маршрутизатора\n*/\nconst props = defineProps({\n  colors: String, // коды цвета, разделённые знаком \"-\"\n  columns: String // число столбиков\n})\n\n// Разделим код цвета на части, а если было передано пустое значение, то создадим пустой массив.\nconst colorsArray = (props.colors) ? props.colors.split('-') : []\n\n// Количество столбцов\nlet colCount = 5\n\n/**\n * Переопределяем сколько столбиков надо создать.\n * А так же соответственно обновим адрес сайта.\n * @param {Number} propsColumns количество столбиков\n */\nconst setColCount = (propsColumns) => {\n  // Если надо переписать число столбиков\n  if (propsColumns > 0) {\n    colCount = propsColumns\n  }\n\n  // Разделяем хеш адреса на части\n  const documentLocationHashArray = document.location.hash.split('/')\n\n  // Обновляем хеш странички, чтобы указать число столбиков\n  document.location.hash =\n    '/' + colCount + '/' +\n    // Если на страницу перешли по адресу с кодом\n    ((documentLocationHashArray.length === 3)\n      ? documentLocationHashArray[2]\n      : '')\n}\nsetColCount(Math.max(Number(props.columns), colorsArray.length))\n</script>\n\n<template>\n    <w-flex class=\"row fill-height fill-width\">\n        <ColRandomColor\n          v-for=\"i in colCount\" :key=\"i\"\n          :color=\"(i <= colorsArray.length) ? '#'+colorsArray[i-1] : ''\"></ColRandomColor>\n    </w-flex>\n</template>\n","import script from \"./RandomColorView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./RandomColorView.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["copyToClipboard","text","navigator","clipboard","writeText","__exports__","childTouchColorLocked","e","x","preventDefault","emit","generateRandomColor","hexCodes","color","i","Math","floor","random","length","generatedColor","ref","props","colorLocked","keydownListener","code","toLowerCase","value","onMounted","document","addEventListener","onUnmounted","removeEventListener","touchColorLocked","colorCode","toString","substring","documentLocationHashArray","location","hash","split","colorCodeHash","replaceAll","replace","trim","join","colorsArray","colors","colCount","setColCount","propsColumns","max","Number","columns"],"sourceRoot":""}